{"ast":null,"code":"import axios from 'axios';\n\n// Create a configured axios instance for API requests\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5258/api/v1',\n  // Backend API URL\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add request interceptor to include authentication token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('admin_token');\n  if (token && config.headers) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle errors\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  // If we receive a 401 Unauthorized or 403 Forbidden, redirect to login page\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","window","location","href"],"sources":["C:/Users/murad/Desktop/Новая папка (2)/novademy-admin/src/api/apiClient.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create a configured axios instance for API requests\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:5258/api/v1', // Backend API URL\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\n// Add request interceptor to include authentication token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('admin_token');\r\n    if (token && config.headers) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle errors\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // If we receive a 401 Unauthorized or 403 Forbidden, redirect to login page\r\n    if (error.response?.status === 401 || error.response?.status === 403) {\r\n      localStorage.removeItem('admin_token');\r\n      localStorage.removeItem('admin_user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,8BAA8B;EAAE;EACzCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,IAAID,MAAM,CAACL,OAAO,EAAE;IAC3BK,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,SAAS,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACT;EACA,IAAI,EAAAD,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,EAAAD,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IACpET,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;IACtCV,YAAY,CAACU,UAAU,CAAC,YAAY,CAAC;IACrCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}