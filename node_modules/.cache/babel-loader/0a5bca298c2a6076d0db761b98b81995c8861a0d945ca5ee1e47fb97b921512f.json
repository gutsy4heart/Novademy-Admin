{"ast":null,"code":"import apiClient from './apiClient';\nexport const courseService = {\n  async getCourses() {\n    try {\n      const response = await apiClient.get('/course');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching courses:', error);\n      throw new Error('Kursları yükləmək mümkün olmadı');\n    }\n  },\n  async getCourse(id) {\n    try {\n      const response = await apiClient.get(`/course/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching course ${id}:`, error);\n      throw new Error('Kursu yükləmək mümkün olmadı');\n    }\n  },\n  async createCourse(courseData) {\n    try {\n      const formData = new FormData();\n      formData.append('title', courseData.title);\n      formData.append('description', courseData.description);\n      formData.append('subject', courseData.subject.toString());\n      if (courseData.image) {\n        formData.append('image', courseData.image);\n      }\n      const response = await apiClient.post('/course', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw new Error('Kursu yaratmaq mümkün olmadı');\n    }\n  },\n  async updateCourse(id, courseData) {\n    try {\n      const formData = new FormData();\n      if (courseData.title) {\n        formData.append('title', courseData.title);\n      }\n      if (courseData.description) {\n        formData.append('description', courseData.description);\n      }\n      if (courseData.subject) {\n        formData.append('subject', courseData.subject.toString());\n      }\n      if (courseData.image) {\n        formData.append('image', courseData.image);\n      }\n      const response = await apiClient.put(`/course/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating course ${id}:`, error);\n      throw new Error('Kursu yeniləmək mümkün olmadı');\n    }\n  },\n  async deleteCourse(id) {\n    try {\n      await apiClient.delete(`/course/${id}`);\n    } catch (error) {\n      console.error(`Error deleting course ${id}:`, error);\n      throw new Error('Kursu silmək mümkün olmadı');\n    }\n  }\n};\nexport const {\n  getCourses,\n  getCourse,\n  createCourse,\n  updateCourse,\n  deleteCourse\n} = courseService;","map":{"version":3,"names":["apiClient","courseService","getCourses","response","get","data","error","console","Error","getCourse","id","createCourse","courseData","formData","FormData","append","title","description","subject","toString","image","post","headers","updateCourse","put","deleteCourse","delete"],"sources":["C:/Users/murad/Desktop/Новая папка (2)/novademy-admin/src/api/courseService.ts"],"sourcesContent":["import apiClient from './apiClient';\r\nimport { SubjectType } from '../types/enums';\r\n\r\nexport interface Course {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  subject: SubjectType;\r\n  imageUrl: string | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreateCourseData {\r\n  title: string;\r\n  description: string;\r\n  subject: SubjectType;\r\n  image?: File;\r\n}\r\n\r\nexport interface UpdateCourseData {\r\n  title?: string;\r\n  description?: string;\r\n  subject?: SubjectType;\r\n  image?: File;\r\n}\r\n\r\nexport const courseService = {\r\n  async getCourses(): Promise<Course[]> {\r\n    try {\r\n      const response = await apiClient.get<Course[]>('/course');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      throw new Error('Kursları yükləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async getCourse(id: string): Promise<Course> {\r\n    try {\r\n      const response = await apiClient.get<Course>(`/course/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching course ${id}:`, error);\r\n      throw new Error('Kursu yükləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async createCourse(courseData: CreateCourseData): Promise<Course> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('title', courseData.title);\r\n      formData.append('description', courseData.description);\r\n      formData.append('subject', courseData.subject.toString());\r\n      \r\n      if (courseData.image) {\r\n        formData.append('image', courseData.image);\r\n      }\r\n\r\n      const response = await apiClient.post<Course>('/course', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating course:', error);\r\n      throw new Error('Kursu yaratmaq mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async updateCourse(id: string, courseData: UpdateCourseData): Promise<Course> {\r\n    try {\r\n      const formData = new FormData();\r\n      \r\n      if (courseData.title) {\r\n        formData.append('title', courseData.title);\r\n      }\r\n      \r\n      if (courseData.description) {\r\n        formData.append('description', courseData.description);\r\n      }\r\n      \r\n      if (courseData.subject) {\r\n        formData.append('subject', courseData.subject.toString());\r\n      }\r\n      \r\n      if (courseData.image) {\r\n        formData.append('image', courseData.image);\r\n      }\r\n\r\n      const response = await apiClient.put<Course>(`/course/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating course ${id}:`, error);\r\n      throw new Error('Kursu yeniləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async deleteCourse(id: string): Promise<void> {\r\n    try {\r\n      await apiClient.delete(`/course/${id}`);\r\n    } catch (error) {\r\n      console.error(`Error deleting course ${id}:`, error);\r\n      throw new Error('Kursu silmək mümkün olmadı');\r\n    }\r\n  }\r\n};\r\n\r\nexport const { getCourses, getCourse, createCourse, updateCourse, deleteCourse } = courseService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}