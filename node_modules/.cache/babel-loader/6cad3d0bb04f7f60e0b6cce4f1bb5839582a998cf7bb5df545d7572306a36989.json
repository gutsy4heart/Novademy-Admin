{"ast":null,"code":"import axios from 'axios';\nimport apiClient from './apiClient';\n\n// User type definition\n\n// Login function\nexport const login = async (username, password) => {\n  try {\n    const response = await axios.post(`${apiClient.defaults.baseURL}/auth/login`, {\n      username,\n      password\n    });\n\n    // Save token to localStorage\n    if (response.data.token) {\n      localStorage.setItem('admin_token', response.data.token);\n      localStorage.setItem('admin_user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    if (error.response) {\n      if (error.response.status === 400) {\n        throw new Error('Yanlış istifadəçi adı və ya şifrə');\n      } else if (error.response.status === 403) {\n        throw new Error('Bu portal yalnız admin istifadəçilər üçündür');\n      }\n    }\n    throw new Error('Giriş zamanı xəta baş verdi. Zəhmət olmasa sonra yenidən cəhd edin');\n  }\n};\n\n// Logout function\nexport const logout = async () => {\n  try {\n    const user = getCurrentUser();\n    if (user && user.id) {\n      await apiClient.post(`/auth/logout/${user.id}`);\n    }\n  } catch (error) {\n    console.error('Logout error:', error);\n  } finally {\n    localStorage.removeItem('admin_token');\n    localStorage.removeItem('admin_user');\n  }\n};\n\n// Get current user from localStorage\nexport const getCurrentUser = () => {\n  const userStr = localStorage.getItem('admin_user');\n  if (userStr) {\n    return JSON.parse(userStr);\n  }\n  return null;\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('admin_token');\n};\n\n// Set auth token for axios requests\nexport const setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n// Export auth service as default\nconst authService = {\n  login,\n  logout,\n  getCurrentUser,\n  isAuthenticated,\n  setAuthToken\n};\nexport default authService;","map":{"version":3,"names":["axios","apiClient","login","username","password","response","post","defaults","baseURL","data","token","localStorage","setItem","JSON","stringify","error","console","status","Error","logout","user","getCurrentUser","id","removeItem","userStr","getItem","parse","isAuthenticated","setAuthToken","headers","common","authService"],"sources":["C:/Users/murad/Desktop/Новая папка (2)/novademy-admin/src/api/authService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport apiClient from './apiClient';\r\n\r\n// User type definition\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  token: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: string;\r\n  token: string;\r\n}\r\n\r\n// Login function\r\nexport const login = async (username: string, password: string): Promise<User> => {\r\n  try {\r\n    const response = await axios.post<AuthResponse>(`${apiClient.defaults.baseURL}/auth/login`, {\r\n      username,\r\n      password\r\n    });\r\n    \r\n    // Save token to localStorage\r\n    if (response.data.token) {\r\n      localStorage.setItem('admin_token', response.data.token);\r\n      localStorage.setItem('admin_user', JSON.stringify(response.data));\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('Login error:', error);\r\n    if (error.response) {\r\n      if (error.response.status === 400) {\r\n        throw new Error('Yanlış istifadəçi adı və ya şifrə');\r\n      } else if (error.response.status === 403) {\r\n        throw new Error('Bu portal yalnız admin istifadəçilər üçündür');\r\n      }\r\n    }\r\n    throw new Error('Giriş zamanı xəta baş verdi. Zəhmət olmasa sonra yenidən cəhd edin');\r\n  }\r\n};\r\n\r\n// Logout function\r\nexport const logout = async (): Promise<void> => {\r\n  try {\r\n    const user = getCurrentUser();\r\n    if (user && user.id) {\r\n      await apiClient.post(`/auth/logout/${user.id}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n  } finally {\r\n    localStorage.removeItem('admin_token');\r\n    localStorage.removeItem('admin_user');\r\n  }\r\n};\r\n\r\n// Get current user from localStorage\r\nexport const getCurrentUser = (): User | null => {\r\n  const userStr = localStorage.getItem('admin_user');\r\n  if (userStr) {\r\n    return JSON.parse(userStr) as User;\r\n  }\r\n  return null;\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!localStorage.getItem('admin_token');\r\n};\r\n\r\n// Set auth token for axios requests\r\nexport const setAuthToken = (token: string | null): void => {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Export auth service as default\r\nconst authService = {\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n  isAuthenticated,\r\n  setAuthToken\r\n};\r\n\r\nexport default authService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;;AAEnC;;AAiBA;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAoB;EAChF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAe,GAAGL,SAAS,CAACM,QAAQ,CAACC,OAAO,aAAa,EAAE;MAC1FL,QAAQ;MACRC;IACF,CAAC,CAAC;;IAEF;IACA,IAAIC,QAAQ,CAACI,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEP,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC;MACxDC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAACI,IAAI,CAAC,CAAC;IACnE;IAEA,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOM,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,IAAIA,KAAK,CAACV,QAAQ,EAAE;MAClB,IAAIU,KAAK,CAACV,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QACjC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACtD,CAAC,MAAM,IAAIH,KAAK,CAACV,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QACxC,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MACjE;IACF;IACA,MAAM,IAAIA,KAAK,CAAC,oEAAoE,CAAC;EACvF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAA2B;EAC/C,IAAI;IACF,MAAMC,IAAI,GAAGC,cAAc,CAAC,CAAC;IAC7B,IAAID,IAAI,IAAIA,IAAI,CAACE,EAAE,EAAE;MACnB,MAAMrB,SAAS,CAACK,IAAI,CAAC,gBAAgBc,IAAI,CAACE,EAAE,EAAE,CAAC;IACjD;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;EACvC,CAAC,SAAS;IACRJ,YAAY,CAACY,UAAU,CAAC,aAAa,CAAC;IACtCZ,YAAY,CAACY,UAAU,CAAC,YAAY,CAAC;EACvC;AACF,CAAC;;AAED;AACA,OAAO,MAAMF,cAAc,GAAGA,CAAA,KAAmB;EAC/C,MAAMG,OAAO,GAAGb,YAAY,CAACc,OAAO,CAAC,YAAY,CAAC;EAClD,IAAID,OAAO,EAAE;IACX,OAAOX,IAAI,CAACa,KAAK,CAACF,OAAO,CAAC;EAC5B;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAO,CAAC,CAAChB,YAAY,CAACc,OAAO,CAAC,aAAa,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAIlB,KAAoB,IAAW;EAC1D,IAAIA,KAAK,EAAE;IACTV,KAAK,CAACO,QAAQ,CAACsB,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUpB,KAAK,EAAE;EACpE,CAAC,MAAM;IACL,OAAOV,KAAK,CAACO,QAAQ,CAACsB,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD;AACF,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG;EAClB7B,KAAK;EACLiB,MAAM;EACNE,cAAc;EACdM,eAAe;EACfC;AACF,CAAC;AAED,eAAeG,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}