{"ast":null,"code":"import apiClient from './apiClient';\nexport const lessonService = {\n  async getLessons() {\n    try {\n      // This endpoint might not exist directly - we might need to fetch courses first\n      // and then get lessons for each course\n      const response = await apiClient.get('/lesson');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching lessons:', error);\n      throw new Error('Dərsləri yükləmək mümkün olmadı');\n    }\n  },\n  async getLessonsByCourse(courseId) {\n    try {\n      const response = await apiClient.get(`/lesson/course/${courseId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching lessons for course ${courseId}:`, error);\n      throw new Error('Kurs dərslərini yükləmək mümkün olmadı');\n    }\n  },\n  async getLesson(id) {\n    try {\n      const response = await apiClient.get(`/lesson/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching lesson ${id}:`, error);\n      throw new Error('Dərsi yükləmək mümkün olmadı');\n    }\n  },\n  async createLesson(lessonData) {\n    try {\n      const formData = new FormData();\n      formData.append('title', lessonData.title);\n      formData.append('description', lessonData.description);\n      formData.append('courseId', lessonData.courseId);\n      if (lessonData.order !== undefined) {\n        formData.append('order', lessonData.order.toString());\n      }\n      if (lessonData.isFree !== undefined) {\n        formData.append('isFree', lessonData.isFree.toString());\n      }\n      if (lessonData.status) {\n        formData.append('status', lessonData.status);\n      }\n      if (lessonData.transcript) {\n        formData.append('transcript', lessonData.transcript);\n      }\n      if (lessonData.video) {\n        formData.append('video', lessonData.video);\n      }\n      if (lessonData.image) {\n        formData.append('image', lessonData.image);\n      }\n      const response = await apiClient.post('/lesson', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating lesson:', error);\n      throw new Error('Dərsi yaratmaq mümkün olmadı');\n    }\n  },\n  async updateLesson(id, lessonData) {\n    try {\n      const formData = new FormData();\n      if (lessonData.title) {\n        formData.append('title', lessonData.title);\n      }\n      if (lessonData.description) {\n        formData.append('description', lessonData.description);\n      }\n      if (lessonData.courseId) {\n        formData.append('courseId', lessonData.courseId);\n      }\n      if (lessonData.order !== undefined) {\n        formData.append('order', lessonData.order.toString());\n      }\n      if (lessonData.isFree !== undefined) {\n        formData.append('isFree', lessonData.isFree.toString());\n      }\n      if (lessonData.status) {\n        formData.append('status', lessonData.status);\n      }\n      if (lessonData.transcript) {\n        formData.append('transcript', lessonData.transcript);\n      }\n      if (lessonData.video) {\n        formData.append('video', lessonData.video);\n      }\n      if (lessonData.image) {\n        formData.append('image', lessonData.image);\n      }\n      const response = await apiClient.put(`/lesson/${id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating lesson ${id}:`, error);\n      throw new Error('Dərsi yeniləmək mümkün olmadı');\n    }\n  },\n  async deleteLesson(id) {\n    try {\n      await apiClient.delete(`/lesson/${id}`);\n    } catch (error) {\n      console.error(`Error deleting lesson ${id}:`, error);\n      throw new Error('Dərsi silmək mümkün olmadı');\n    }\n  },\n  async markLessonAsWatched(lessonId, watchedSeconds) {\n    try {\n      await apiClient.post(`/lesson/${lessonId}/watch`, {\n        watchedSeconds\n      });\n    } catch (error) {\n      console.error(`Error marking lesson ${lessonId} as watched:`, error);\n      throw new Error('Dərsi izlənilmiş kimi qeyd etmək mümkün olmadı');\n    }\n  },\n  async getLessonProgress(userId, lessonId) {\n    try {\n      const response = await apiClient.get(`/lesson/${lessonId}/progress/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching lesson ${lessonId} progress:`, error);\n      throw new Error('Dərslərin irəliləyişini yükləmək mümkün olmadı');\n    }\n  }\n};\nexport const {\n  getLessons,\n  getLessonsByCourse,\n  getLesson,\n  createLesson,\n  updateLesson,\n  deleteLesson,\n  markLessonAsWatched,\n  getLessonProgress\n} = lessonService;","map":{"version":3,"names":["apiClient","lessonService","getLessons","response","get","data","error","console","Error","getLessonsByCourse","courseId","getLesson","id","createLesson","lessonData","formData","FormData","append","title","description","order","undefined","toString","isFree","status","transcript","video","image","post","headers","updateLesson","put","deleteLesson","delete","markLessonAsWatched","lessonId","watchedSeconds","getLessonProgress","userId"],"sources":["C:/Users/murad/Desktop/Новая папка (2)/novademy-admin/src/api/lessonService.ts"],"sourcesContent":["import apiClient from './apiClient';\r\nimport { LessonStatus } from '../types/enums';\r\n\r\nexport interface Lesson {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  courseId: string;\r\n  courseName: string;\r\n  videoUrl: string | null;\r\n  transcript: string | null;\r\n  duration: number;\r\n  order: number;\r\n  status: LessonStatus;\r\n  isFree: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreateLessonData {\r\n  title: string;\r\n  description: string;\r\n  courseId: string;\r\n  video?: File;\r\n  image?: File;\r\n  transcript?: string;\r\n  order?: number;\r\n  isFree?: boolean;\r\n  status?: LessonStatus;\r\n}\r\n\r\nexport interface UpdateLessonData {\r\n  title?: string;\r\n  description?: string;\r\n  courseId?: string;\r\n  video?: File;\r\n  image?: File;\r\n  transcript?: string;\r\n  order?: number;\r\n  isFree?: boolean;\r\n  status?: LessonStatus;\r\n}\r\n\r\nexport interface LessonProgress {\r\n  userId: string;\r\n  lessonId: string;\r\n  isCompleted: boolean;\r\n  completedAt: string | null;\r\n  watched: number;\r\n}\r\n\r\nexport const lessonService = {\r\n  async getLessons(): Promise<Lesson[]> {\r\n    try {\r\n      // This endpoint might not exist directly - we might need to fetch courses first\r\n      // and then get lessons for each course\r\n      const response = await apiClient.get<Lesson[]>('/lesson');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching lessons:', error);\r\n      throw new Error('Dərsləri yükləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async getLessonsByCourse(courseId: string): Promise<Lesson[]> {\r\n    try {\r\n      const response = await apiClient.get<Lesson[]>(`/lesson/course/${courseId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching lessons for course ${courseId}:`, error);\r\n      throw new Error('Kurs dərslərini yükləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async getLesson(id: string): Promise<Lesson> {\r\n    try {\r\n      const response = await apiClient.get<Lesson>(`/lesson/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching lesson ${id}:`, error);\r\n      throw new Error('Dərsi yükləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async createLesson(lessonData: CreateLessonData): Promise<Lesson> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('title', lessonData.title);\r\n      formData.append('description', lessonData.description);\r\n      formData.append('courseId', lessonData.courseId);\r\n      \r\n      if (lessonData.order !== undefined) {\r\n        formData.append('order', lessonData.order.toString());\r\n      }\r\n      \r\n      if (lessonData.isFree !== undefined) {\r\n        formData.append('isFree', lessonData.isFree.toString());\r\n      }\r\n      \r\n      if (lessonData.status) {\r\n        formData.append('status', lessonData.status);\r\n      }\r\n      \r\n      if (lessonData.transcript) {\r\n        formData.append('transcript', lessonData.transcript);\r\n      }\r\n      \r\n      if (lessonData.video) {\r\n        formData.append('video', lessonData.video);\r\n      }\r\n      \r\n      if (lessonData.image) {\r\n        formData.append('image', lessonData.image);\r\n      }\r\n\r\n      const response = await apiClient.post<Lesson>('/lesson', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating lesson:', error);\r\n      throw new Error('Dərsi yaratmaq mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async updateLesson(id: string, lessonData: UpdateLessonData): Promise<Lesson> {\r\n    try {\r\n      const formData = new FormData();\r\n      \r\n      if (lessonData.title) {\r\n        formData.append('title', lessonData.title);\r\n      }\r\n      \r\n      if (lessonData.description) {\r\n        formData.append('description', lessonData.description);\r\n      }\r\n      \r\n      if (lessonData.courseId) {\r\n        formData.append('courseId', lessonData.courseId);\r\n      }\r\n      \r\n      if (lessonData.order !== undefined) {\r\n        formData.append('order', lessonData.order.toString());\r\n      }\r\n      \r\n      if (lessonData.isFree !== undefined) {\r\n        formData.append('isFree', lessonData.isFree.toString());\r\n      }\r\n      \r\n      if (lessonData.status) {\r\n        formData.append('status', lessonData.status);\r\n      }\r\n      \r\n      if (lessonData.transcript) {\r\n        formData.append('transcript', lessonData.transcript);\r\n      }\r\n      \r\n      if (lessonData.video) {\r\n        formData.append('video', lessonData.video);\r\n      }\r\n      \r\n      if (lessonData.image) {\r\n        formData.append('image', lessonData.image);\r\n      }\r\n\r\n      const response = await apiClient.put<Lesson>(`/lesson/${id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating lesson ${id}:`, error);\r\n      throw new Error('Dərsi yeniləmək mümkün olmadı');\r\n    }\r\n  },\r\n\r\n  async deleteLesson(id: string): Promise<void> {\r\n    try {\r\n      await apiClient.delete(`/lesson/${id}`);\r\n    } catch (error) {\r\n      console.error(`Error deleting lesson ${id}:`, error);\r\n      throw new Error('Dərsi silmək mümkün olmadı');\r\n    }\r\n  },\r\n  \r\n  async markLessonAsWatched(lessonId: string, watchedSeconds: number): Promise<void> {\r\n    try {\r\n      await apiClient.post(`/lesson/${lessonId}/watch`, { watchedSeconds });\r\n    } catch (error) {\r\n      console.error(`Error marking lesson ${lessonId} as watched:`, error);\r\n      throw new Error('Dərsi izlənilmiş kimi qeyd etmək mümkün olmadı');\r\n    }\r\n  },\r\n  \r\n  async getLessonProgress(userId: string, lessonId: string): Promise<LessonProgress> {\r\n    try {\r\n      const response = await apiClient.get<LessonProgress>(`/lesson/${lessonId}/progress/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching lesson ${lessonId} progress:`, error);\r\n      throw new Error('Dərslərin irəliləyişini yükləmək mümkün olmadı');\r\n    }\r\n  }\r\n};\r\n\r\nexport const { \r\n  getLessons, \r\n  getLessonsByCourse, \r\n  getLesson, \r\n  createLesson, \r\n  updateLesson, \r\n  deleteLesson,\r\n  markLessonAsWatched,\r\n  getLessonProgress \r\n} = lessonService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}